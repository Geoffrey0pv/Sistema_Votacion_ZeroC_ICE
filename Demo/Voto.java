//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `System.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

public class Voto implements java.lang.Cloneable,
                             java.io.Serializable
{
    public long idVoto;

    public String idMesa;

    public String idElectorHash;

    public long idCandidato;

    public long tsEmitido;

    public Voto()
    {
        this.idMesa = "";
        this.idElectorHash = "";
    }

    public Voto(long idVoto, String idMesa, String idElectorHash, long idCandidato, long tsEmitido)
    {
        this.idVoto = idVoto;
        this.idMesa = idMesa;
        this.idElectorHash = idElectorHash;
        this.idCandidato = idCandidato;
        this.tsEmitido = tsEmitido;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Voto r = null;
        if(rhs instanceof Voto)
        {
            r = (Voto)rhs;
        }

        if(r != null)
        {
            if(this.idVoto != r.idVoto)
            {
                return false;
            }
            if(this.idMesa != r.idMesa)
            {
                if(this.idMesa == null || r.idMesa == null || !this.idMesa.equals(r.idMesa))
                {
                    return false;
                }
            }
            if(this.idElectorHash != r.idElectorHash)
            {
                if(this.idElectorHash == null || r.idElectorHash == null || !this.idElectorHash.equals(r.idElectorHash))
                {
                    return false;
                }
            }
            if(this.idCandidato != r.idCandidato)
            {
                return false;
            }
            if(this.tsEmitido != r.tsEmitido)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Demo::Voto");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, idVoto);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, idMesa);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, idElectorHash);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, idCandidato);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, tsEmitido);
        return h_;
    }

    public Voto clone()
    {
        Voto c = null;
        try
        {
            c = (Voto)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeLong(this.idVoto);
        ostr.writeString(this.idMesa);
        ostr.writeString(this.idElectorHash);
        ostr.writeLong(this.idCandidato);
        ostr.writeLong(this.tsEmitido);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.idVoto = istr.readLong();
        this.idMesa = istr.readString();
        this.idElectorHash = istr.readString();
        this.idCandidato = istr.readLong();
        this.tsEmitido = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Voto v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Voto ice_read(com.zeroc.Ice.InputStream istr)
    {
        Voto v = new Voto();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Voto> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Voto v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Voto> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Voto.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Voto _nullMarshalValue = new Voto();

    /** @hidden */
    public static final long serialVersionUID = -600507026L;
}
